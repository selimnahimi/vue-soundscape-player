var B=Object.defineProperty;var v=(r,e,t)=>e in r?B(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var s=(r,e,t)=>(v(r,typeof e!="symbol"?e+"":e,t),t);import{t as A,V as b,u as _,j as S,C as y,_ as w,o as c,c as p,a,b as h,e as f,k as P,p as I,l as F}from"./index-c94840e7.js";class k{constructor(){s(this,"name","");s(this,"dsp","");s(this,"actions",[])}}class C{constructor(){s(this,"type","playrandom");s(this,"time",{min:1,max:1});s(this,"volume",{min:1,max:1});s(this,"pitch",{min:100,max:100});s(this,"soundlevel","SNDLVL_140dB");s(this,"position","random");s(this,"rndwave",[]);s(this,"soundscapeToPlay","")}}class N{constructor(){s(this,"title","");s(this,"soundscapes",[])}}class g{constructor(){s(this,"soundscapeScript",new N);s(this,"depth",0);s(this,"isBuildingStringBuffer",!1);s(this,"currentCharacter","");s(this,"stringBuffer","");s(this,"currentSoundscape",null);s(this,"currentAction",null);s(this,"currentActionParameterName",null)}static parse(e){const t=new g;return e.split("").forEach(i=>t.processCharacter(i)),t.getResult()}getResult(){return this.soundscapeScript}processCharacter(e){if(e){switch(this.currentCharacter=e,e){case"{":this.increaseDepth();break;case"}":this.decreaseDepth();break;case'"':this.updateStringBuffer();break;default:this.appendToStringBuffer()}this.assertDepthIsPositive()}}appendToStringBuffer(){this.isBuildingStringBuffer&&(this.stringBuffer+=this.currentCharacter)}updateStringBuffer(){this.isBuildingStringBuffer?(this.finalizeStringBuffer(),this.isBuildingStringBuffer=!1):this.isBuildingStringBuffer=!0}finalizeStringBuffer(){this.shouldStartBuildingSoundscape()&&this.startBuildingSoundscape(),this.shouldStartBuildingAction()&&this.startBuildingAction(),this.shouldBuildActionParameter()&&this.buildActionParameter(),this.shouldStartBuildingActionParameter()&&this.startBuildingActionParameter(),this.shouldCollectRandomSounds()&&this.collectRandomSounds(),this.resetStringBuffer()}shouldStartBuildingSoundscape(){return this.depth===0}startBuildingSoundscape(){this.currentSoundscape=new k,this.currentSoundscape.name=this.stringBuffer}isBuildingSoundscape(){return this.currentSoundscape!==null}shouldStartBuildingAction(){return this.depth===1&&this.isBuildingSoundscape()}startBuildingAction(){this.currentAction=new C,this.currentAction.type=this.stringBuffer}isBuildingAction(){return this.currentAction!==null}shouldStartBuildingActionParameter(){return this.depth===2&&this.isBuildingAction()&&!this.isBuildingActionParameter()}startBuildingActionParameter(){this.currentActionParameterName=this.stringBuffer}isBuildingActionParameter(){return this.currentActionParameterName!==null}shouldBuildActionParameter(){return this.depth===2&&this.isBuildingActionParameter()}buildActionParameter(){const e=this.currentActionParameterName,t=this.stringBuffer.trim(),i=this.currentAction;switch(e){case"name":i.soundscapeToPlay=t;break;case"soundlevel":i.soundscapeToPlay=t;break;case"wave":i.rndwave.push(t);break;case"position":i.position=t;break;case"time":i.time=this.parseRange();break;case"volume":i.volume=this.parseRange();break;case"pitch":i.pitch=this.parseRange();break}this.currentAction=i,this.stopBuildingActionParameter()}stopBuildingActionParameter(){this.currentActionParameterName=null}shouldCollectRandomSounds(){return this.depth===3&&this.isBuildingActionParameter()}collectRandomSounds(){this.currentActionParameterName==="rndwave"&&this.stringBuffer!=="wave"&&this.currentAction.rndwave.push(this.stringBuffer)}resetStringBuffer(){this.stringBuffer=""}parseRange(){const e=this.stringBuffer.split(",");if(e.length>1){let t=e[0].trim(),i=e[1].trim();return t=this.addZeroToFloatString(t),i=this.addZeroToFloatString(i),{min:parseFloat(t),max:parseFloat(i)}}else{const t=e[0];return{min:parseFloat(t),max:parseFloat(t)}}}addZeroToFloatString(e){return e.startsWith(".")?"0"+e:e}increaseDepth(){this.depth++}decreaseDepth(){const e=this.depth-1;e===1&&this.isBuildingAction()&&(this.currentSoundscape.actions.push(this.currentAction),this.currentAction=null),e===0&&this.isBuildingSoundscape()&&this.soundscapeScript.soundscapes.push(this.currentSoundscape),this.depth=e}assertDepthIsPositive(){this.depth<0&&(console.warn("WARNING: Depth has gone below 0!"),this.depth=0)}}var R=Object.defineProperty,D=Object.getOwnPropertyDescriptor,m=(r,e,t,i)=>{for(var n=i>1?void 0:i?D(e,t):e,l=r.length-1,u;l>=0;l--)(u=r[l])&&(n=(i?u(e,t,n):u(n))||n);return i&&n&&R(e,t,n),n};let d=class extends b{constructor(){super(...arguments);s(this,"store",_());s(this,"file",null);s(this,"successfullyAddedSoundscape",!1);s(this,"successfullyAddedFolder",!1);s(this,"errorMessage","");s(this,"fileInput");s(this,"folderInput")}get soundscapeScripts(){return this.store.getters.soundscapeScripts}get soundFileAmount(){return Object.keys(this.store.getters.soundFiles).length}get soundscapeScriptAmount(){return this.soundscapeScripts.length}readFile(){if(this.errorMessage="",!this.fileInput.files){this.errorMessage="You must select a soundscape file!";return}if(this.file=this.fileInput.files[0],!this.file.name.includes("soundscape")||!this.file.name.endsWith(".txt")){this.errorMessage="You must select a soundscape file!";return}const e=new FileReader;e.onload=this.loadFile,e.onerror=t=>console.log(t),e.readAsText(this.file)}readFolder(){if(this.errorMessage="",!this.folderInput.files){this.errorMessage="You must select a sound folder!";return}for(let e=0;e<this.folderInput.files.length;e++){const t=this.folderInput.files[e];if(!t.webkitRelativePath.startsWith("sound/")){this.errorMessage="You must select a sound folder!";return}this.isSoundFile(t)&&this.store.dispatch("addSoundFile",{file:t})}this.successfullyAddedFolder=!0}isSoundFile(e){let t=[".wav",".mp3",".ogg"];for(const i of t)if(e.name.endsWith(i))return!0;return!1}loadFile(e){if(!this.file){this.errorMessage="Failed to load soundscript file";return}let t=e.target.result.toString(),i=g.parse(t);i.title=this.file.name,this.soundscapeScriptLoaded(i),this.successfullyAddedSoundscape=!0}soundscapeScriptLoaded(e){this.store.dispatch("addSoundscapeScript",{script:e})}};m([S("fileInput")],d.prototype,"fileInput",2);m([S("folderInput")],d.prototype,"folderInput",2);d=m([y],d);const x=A(d);const o=r=>(I("data-v-369c00b1"),r=r(),F(),r),T={class:"content"},M=o(()=>a("h1",{class:"title"},"Import",-1)),V=o(()=>a("h2",null,"Statistics",-1)),O=o(()=>a("hr",null,null,-1)),W=o(()=>a("h2",null,"Import new",-1)),Y=o(()=>a("label",{for:"path"},"Import soundscape script",-1)),$={key:0},E=o(()=>a("label",{for:"folder"},'Import "sound" folder',-1)),j={key:1},L={key:2,class:"error"},G=P('<h2 style="margin-top:30px;" data-v-369c00b1>Help for importing soundscape scripts</h2><p data-v-369c00b1>Every source game has a <span data-v-369c00b1>script</span> folder where all the scripts are stored.</p><p data-v-369c00b1>Among them there are files which names start with <span data-v-369c00b1>soundscapes_</span>.</p><p data-v-369c00b1><a href="https://github.com/Facepunch/garrysmod/tree/master/garrysmod/scripts/soundscapes" target="_blank" data-v-369c00b1>Or you can grab some from here</a>.</p><p data-v-369c00b1>You can import these into this application.</p><h2 style="margin-top:30px;" data-v-369c00b1>Help for importing sounds</h2><p data-v-369c00b1>Every source game has a <span data-v-369c00b1>sound</span> folder where all the audio files are stored.</p><p data-v-369c00b1>This is usually stored in a <span data-v-369c00b1>vpk</span> package. You must extract it using <span data-v-369c00b1>GCFScape</span>, then import it into this application.</p><p data-v-369c00b1><a href="https://developer.valvesoftware.com/wiki/GCFScape" target="_blank" data-v-369c00b1>A guide to do this can be found here</a>.</p><p style="margin-top:30px;" data-v-369c00b1>When importing, make sure to select this <span data-v-369c00b1>sound</span> folder only (not a subfolder, or the game&#39;s root folder.)</p>',10);function Z(r,e,t,i,n,l){return c(),p("div",T,[M,V,a("p",null,"Imported soundscapes: "+h(r.soundscapeScriptAmount),1),a("p",null,"Imported sounds: "+h(r.soundFileAmount),1),O,W,Y,a("input",{id:"path",type:"file",ref:"fileInput",onChange:e[0]||(e[0]=u=>r.readFile())},null,544),r.successfullyAddedSoundscape?(c(),p("p",$,"Soundscape script successfully added.")):f("",!0),E,a("input",{type:"file",id:"folder",ref:"folderInput",onChange:e[1]||(e[1]=u=>r.readFolder()),webkitdirectory:"",directory:"",multiple:""},null,544),r.successfullyAddedFolder?(c(),p("p",j,"Sound folder successfully added.")):f("",!0),r.errorMessage?(c(),p("p",L,"Import failed: "+h(r.errorMessage),1)):f("",!0),G])}const q=w(x,[["render",Z],["__scopeId","data-v-369c00b1"]]);export{q as default};
